name: Docker Build and Push

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Optional tag suffix (e.g., "hotfix", "feature-name")'
        required: false
        default: ''

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/acquisitions

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # Branch-based tags
            type=ref,event=branch

            # SHA tag (short)
            type=sha,prefix={{branch}}-,format=short

            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}

            # Timestamp tag with prod prefix
            type=raw,value=prod-{{date 'YYYYMMDD-HHmmss' tz='UTC'}}

            # Semantic version tags (if using version tags)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

            # Custom suffix if provided
            type=raw,value={{branch}}-${{ github.event.inputs.tag_suffix }},enable=${{ github.event.inputs.tag_suffix != '' }}

          labels: |
            org.opencontainers.image.title=Acquisitions API
            org.opencontainers.image.description=Secure RESTful API with authentication
            org.opencontainers.image.vendor=Ayush Mondal
            org.opencontainers.image.authors=ayushh9999
            maintainer=ayushh9999

      - name: Generate build timestamp
        id: timestamp
        run: |
          echo "timestamp=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          echo "short_sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILD_DATE=${{ steps.timestamp.outputs.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Generate image summary
        if: success()
        run: |
          echo "## 🐳 Docker Image Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`linux/amd64\`, \`linux/arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Time:** ${{ steps.timestamp.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ steps.timestamp.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Published Tags" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            echo "$tag"
          done >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Quick Start" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Pull and run the latest image:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 5000:5000 --env-file .env.production ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Or use docker-compose:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose -f docker-compose.prod.yml up -d" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub Release summary
        if: success() && github.ref == 'refs/heads/main'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This production image is ready to be deployed to:" >> $GITHUB_STEP_SUMMARY
          echo "- ☁️ Cloud platforms (AWS ECS, Azure Container Apps, GCP Cloud Run)" >> $GITHUB_STEP_SUMMARY
          echo "- ☸️ Kubernetes clusters" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker Swarm" >> $GITHUB_STEP_SUMMARY
          echo "- 🖥️ Self-hosted servers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Documentation:** [DOCKER_SETUP.md](https://github.com/${{ github.repository }}/blob/main/DOCKER_SETUP.md)" >> $GITHUB_STEP_SUMMARY

      - name: Image scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Docker Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Docker image build process failed. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Common issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Check if DOCKER_USERNAME and DOCKER_PASSWORD secrets are correctly set" >> $GITHUB_STEP_SUMMARY
          echo "- Verify the Dockerfile syntax" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all required files are present in the repository" >> $GITHUB_STEP_SUMMARY
          echo "- Check if the base images are accessible" >> $GITHUB_STEP_SUMMARY

      - name: Clean up build cache (weekly)
        if: github.event.schedule == '0 0 * * 0'
        run: |
          echo "Cleaning up old build cache..."
          docker buildx prune -f --filter until=168h
